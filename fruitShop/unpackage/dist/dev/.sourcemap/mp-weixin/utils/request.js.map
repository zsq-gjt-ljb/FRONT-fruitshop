{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["// 请求封装\r\nconst request = async (options = {}) => {\r\n  try {\r\n    // 调试信息\r\n    console.log('发送请求到:', options.url);\r\n    if (options.data) console.log('请求数据:', options.data);\r\n\r\n    // 获取本地存储的token和游客模式标记\r\n    const token = uni.getStorageSync('token');\r\n    const isGuestMode = uni.getStorageSync('isGuestMode');\r\n\r\n    // 组装请求头 - 移除中文请求头\r\n    const header = {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': token ? `Bearer ${token}` : '',\r\n      'X-Brand': 'NanChaBeiGuo' // 改为英文或拼音\r\n    };\r\n\r\n    const response = await uni.request({\r\n      url: options.url,\r\n      method: options.method || 'GET',\r\n      data: options.data || {},\r\n      header: { ...header, ...options.header }\r\n    });\r\n\r\n    // 添加ID转换处理\r\n    if (response.data?.data) {\r\n      response.data.data = convertIdsToString(response.data.data);\r\n    }\r\n\r\n    if (response.statusCode === 200) {\r\n      return response.data;\r\n    } else if (response.statusCode === 401) {\r\n      // 检查是否需要登录的API\r\n      const requiresAuth = checkIfRequiresAuth(options.url);\r\n      \r\n      // 如果是游客模式下访问需要登录的API\r\n      if (isGuestMode && requiresAuth) {\r\n        // 跳转到登录页面并设置返回页面\r\n        const currentPage = getCurrentPageUrl();\r\n        uni.navigateTo({\r\n          url: '/pages/login/login?redirect=' + encodeURIComponent(currentPage)\r\n        });\r\n        throw new Error('游客模式无法访问，请登录');\r\n      } else {\r\n        // 正常的token过期，跳转到登录页\r\n        uni.navigateTo({\r\n          url: '/pages/login/login'\r\n        });\r\n        throw new Error('未授权，请重新登录');\r\n      }\r\n    } else {\r\n      uni.showToast({\r\n        title: response.data.message || '请求失败',\r\n        icon: 'none'\r\n      });\r\n      throw new Error(response.data.message || '请求失败');\r\n    }\r\n  } catch (error) {\r\n    uni.showToast({\r\n      title: '网络错误',\r\n      icon: 'none'\r\n    });\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 获取当前页面URL\r\nconst getCurrentPageUrl = () => {\r\n  const pages = getCurrentPages();\r\n  const currentPage = pages[pages.length - 1];\r\n  const url = `/${currentPage.route}`;\r\n  \r\n  const query = currentPage.options;\r\n  if (Object.keys(query).length > 0) {\r\n    const queryStr = Object.keys(query)\r\n      .map(key => `${key}=${query[key]}`)\r\n      .join('&');\r\n    return `${url}?${queryStr}`;\r\n  }\r\n  \r\n  return url;\r\n};\r\n\r\n// 检查API是否需要认证\r\nconst checkIfRequiresAuth = (url) => {\r\n  // 需要认证的API路径列表\r\n  const requiresAuthPaths = [\r\n    '/api/user/profile',\r\n    '/api/addressbook',\r\n    '/api/order',\r\n    '/api/user',\r\n    '/api/cart'\r\n  ];\r\n  \r\n  // 检查URL是否包含需要认证的路径\r\n  return requiresAuthPaths.some(path => url.includes(path));\r\n};\r\n\r\n// 递归转换ID字段为字符串\r\nconst convertIdsToString = (data) => {\r\n  if (Array.isArray(data)) {\r\n    return data.map(item => convertIdsToString(item));\r\n  } else if (data && typeof data === 'object') {\r\n    return Object.entries(data).reduce((acc, [key, value]) => {\r\n      acc[key] = key.toLowerCase().endsWith('id') && typeof value === 'number' \r\n        ? value.toString() \r\n        : convertIdsToString(value);\r\n      return acc;\r\n    }, {});\r\n  }\r\n  return data;\r\n};\r\n\r\nexport default request; "],"names":["uni"],"mappings":"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"}